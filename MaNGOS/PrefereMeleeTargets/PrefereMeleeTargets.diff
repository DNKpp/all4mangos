diff --git a/src/game/Unit.cpp b/src/game/Unit.cpp
index 50c1ef0..274bd48 100644
--- a/src/game/Unit.cpp
+++ b/src/game/Unit.cpp
@@ -252,6 +252,8 @@ Unit::Unit()
     // remove aurastates allowing special moves
     for(int i=0; i < MAX_REACTIVE; ++i)
         m_reactiveTimer[i] = 0;
+
+    m_bPrefereMeleeTargets = false;
 }
 
 Unit::~Unit()
@@ -7665,6 +7667,26 @@ bool Unit::SelectHostileTarget()
             }while (aura != tauntAuras.begin());
         }
     }
+    //get the melee target with most thread
+    else if (m_bPrefereMeleeTargets)
+    {
+        ThreatList const& tList = m_ThreatManager.getThreatList();
+        uint32 UnitThread = 0;
+        if (!tList.empty())
+        {
+            for (ThreatList::const_iterator i = tList.begin(); i != tList.end(); ++i)
+            {
+                ObjectGuid Guid = (*i)->getUnitGuid();
+                //If we are within range melee the target
+                Unit *pUnit = GetMap()->GetPlayer(Guid);
+                if (pUnit && pUnit->GetTypeId() == TYPEID_PLAYER && IsWithinDistInMap(pUnit, ATTACK_DISTANCE) && (*i)->getThreat() > UnitThread)
+                {
+                    UnitThread = (*i)->getThreat();
+                    target = pUnit;
+                }
+            }
+        }
+    }
 
     // No taunt aura or taunt aura caster is dead, standard target selection
     if (!target && !m_ThreatManager.isThreatListEmpty())
diff --git a/src/game/Unit.h b/src/game/Unit.h
index b1e9233..33df430 100644
--- a/src/game/Unit.h
+++ b/src/game/Unit.h
@@ -1793,6 +1793,9 @@ class MANGOS_DLL_SPEC Unit : public WorldObject
         void AddPetAura(PetAura const* petSpell);
         void RemovePetAura(PetAura const* petSpell);
 
+        //target selections
+        void SetPrefereMeleeTargets(bool bPrefere = true) { m_bPrefereMeleeTargets = bPrefere; }
+
         // Movement info
         //MovementInfo m_movementInfo; -- BIG TODO backport
 
@@ -1881,6 +1884,8 @@ class MANGOS_DLL_SPEC Unit : public WorldObject
 
         ObjectGuid m_TotemSlot[MAX_TOTEM_SLOT];
 
+        bool m_bPrefereMeleeTargets;
+
     private:                                                // Error traps for some wrong args using
         // this will catch and prevent build for any cases when all optional args skipped and instead triggered used non boolean type
         // no bodies expected for this declarations
