diff --git a/src/game/GameObject.h b/src/game/GameObject.h
index 99ab379..f774039 100644
--- a/src/game/GameObject.h
+++ b/src/game/GameObject.h
@@ -506,16 +506,6 @@ struct GameObjectLocale
     std::vector<std::string> CastBarCaption;
 };
 
-// client side GO show states
-enum GOState
-{
-    GO_STATE_ACTIVE             = 0,                        // show in world as used and not reset (closed door open)
-    GO_STATE_READY              = 1,                        // show in world as ready (closed door close)
-    GO_STATE_ACTIVE_ALTERNATIVE = 2                         // show in world as used in alt way and not reset (closed door open by cannon fire)
-};
-
-#define MAX_GO_STATE              3
-
 // from `gameobject`
 struct GameObjectData
 {
diff --git a/src/game/Object.cpp b/src/game/Object.cpp
index 4cc8025..c1bd182 100644
--- a/src/game/Object.cpp
+++ b/src/game/Object.cpp
@@ -42,6 +42,7 @@
 #include "ObjectPosSelector.h"
 
 #include "TemporarySummon.h"
+#include "TemporarySummonGO.h"
 
 Object::Object( )
 {
@@ -1626,6 +1627,29 @@ Creature* WorldObject::SummonCreature(uint32 id, float x, float y, float z, floa
     return pCreature;
 }
 
+GameObject* WorldObject::SummonGameObject(uint32 id, float x, float y, float z, float ang1, TempSummonType spwtype, uint32 despwtime, float rotation0, float rotation1, float rotation2, float rotation3, uint32 animprogress, GOState state)
+{
+    TemporarySummonGO* pObject = new TemporarySummonGO(GetObjectGuid());
+
+    if (!pObject->Create(GetMap()->GenerateLocalLowGuid(HIGHGUID_UNIT), id, GetMap(), x, y, z, ang1, rotation0, rotation1, rotation2, rotation3, animprogress, state))
+    {
+        delete pObject;
+        return NULL;
+    }
+
+    if(!pObject->IsPositionValid())
+    {
+        sLog.outError("GameObject (guidlow %d, entry %d) not summoned. Suggested coordinates isn't valid (X: %f Y: %f)",pObject->GetGUIDLow(),pObject->GetEntry(),pObject->GetPositionX(),pObject->GetPositionY());
+        delete pObject;
+        return NULL;
+    }
+
+    pObject->Summon(spwtype, despwtime);
+
+    //// return the creature therewith the summoner has access to it
+    return pObject;
+}
+
 namespace MaNGOS
 {
     class NearUsedPosDo
diff --git a/src/game/Object.h b/src/game/Object.h
index c23f161..a515723 100644
--- a/src/game/Object.h
+++ b/src/game/Object.h
@@ -54,6 +54,16 @@ enum TempSummonType
     TEMPSUMMON_MANUAL_DESPAWN              = 8              // despawns when UnSummon() is called
 };
 
+// client side GO show states
+enum GOState
+{
+    GO_STATE_ACTIVE             = 0,                        // show in world as used and not reset (closed door open)
+    GO_STATE_READY              = 1,                        // show in world as ready (closed door close)
+    GO_STATE_ACTIVE_ALTERNATIVE = 2                         // show in world as used in alt way and not reset (closed door open by cannon fire)
+};
+
+#define MAX_GO_STATE              3
+
 class WorldPacket;
 class UpdateData;
 class WorldSession;
@@ -561,6 +571,8 @@ class MANGOS_DLL_SPEC WorldObject : public Object
 
         Creature* SummonCreature(uint32 id, float x, float y, float z, float ang,TempSummonType spwtype,uint32 despwtime, bool asActiveObject = false);
 
+        GameObject* SummonGameObject(uint32 id, float x, float y, float z, float ang, TempSummonType spwtype, uint32 despwtime = 1000 , float  rotation0 = 0, float rotation1 = 0, float rotation2 = 0, float rotation3 = 0, uint32 animprogress = 100, GOState state = GO_STATE_READY);
+
         bool isActiveObject() const { return m_isActiveObject || m_viewPoint.hasViewers(); }
 
         ViewPoint& GetViewPoint() { return m_viewPoint; }

diff --git a/src/game/TemporarySummonGO.cpp b/src/game/TemporarySummonGO.cpp
new file mode 100644
--- /dev/null
+++ b/src/game/TemporarySummonGO.cpp
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2005-2011 MaNGOS <http://getmangos.com/>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "TemporarySummonGO.h"
+#include "Log.h"
+
+TemporarySummonGO::TemporarySummonGO( ObjectGuid summoner ) :
+m_type(TEMPSUMMON_TIMED_DESPAWN), m_timer(0), m_lifetime(0), m_summoner(summoner)
+{
+}
+
+void TemporarySummonGO::Update( uint32 update_diff,  uint32 diff )
+{
+    switch(m_type)
+    {
+        case TEMPSUMMON_MANUAL_DESPAWN:
+            break;
+        case TEMPSUMMON_TIMED_DESPAWN:
+        {
+            if (m_timer <= diff)
+            {
+                UnSummon();
+                return;
+            }
+
+            m_timer -= diff;
+            break;
+        }
+        default:
+            UnSummon();
+            sLog.outError("Temporary summoned gameobject (entry: %u) have unknown type %u of ",GetEntry(),m_type);
+            break;
+    }
+
+    GameObject::Update( update_diff, diff );
+}
+
+void TemporarySummonGO::Summon(TempSummonType type, uint32 lifetime)
+{
+    m_type = type;
+    m_timer = lifetime;
+    m_lifetime = lifetime;
+
+    GetMap()->Add((GameObject*)this);
+}
+
+void TemporarySummonGO::UnSummon()
+{
+    AddObjectToRemoveList();
+}
+
+void TemporarySummonGO::SaveToDB()
+{
+}

diff --git a/src/game/TemporarySummonGO.h b/src/game/TemporarySummonGO.h

new file mode 100644
--- /dev/null
+++ b/src/game/TemporarySummonGO.h
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2005-2011 MaNGOS <http://getmangos.com/>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef MANGOSSERVER_TEMPSUMMON_GO_H
+#define MANGOSSERVER_TEMPSUMMON_GO_H
+
+#include "GameObject.h"
+#include "ObjectAccessor.h"
+
+class TemporarySummonGO : public GameObject
+{
+    public:
+        explicit TemporarySummonGO(ObjectGuid summoner = ObjectGuid());
+        virtual ~TemporarySummonGO(){};
+        void Update( uint32 update_diff,  uint32 diff );
+        void Summon(TempSummonType type, uint32 lifetime);
+        void MANGOS_DLL_SPEC UnSummon();
+        void SaveToDB();
+        ObjectGuid const& GetSummonerGuid() const { return m_summoner ; }
+        Unit* GetSummoner() const { return ObjectAccessor::GetUnit(*this, m_summoner); }
+    private:
+        TempSummonType m_type;
+        uint32 m_timer;
+        uint32 m_lifetime;
+        ObjectGuid m_summoner;
+};
+#endif

